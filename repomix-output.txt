This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-08T15:31:29.173Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.gitignore
package.json
public/index.html
public/manifest.json
public/robots.txt
README.md
src/App.css
src/App.js
src/App.test.js
src/components/Achievements.js
src/components/Exercise.js
src/components/ExerciseLibrary.js
src/components/HomePage.js
src/components/Login.js
src/components/Navigation.js
src/components/PrivateRoute.js
src/components/ProgressDashboard.js
src/components/QuickPump.js
src/components/Settings.js
src/components/WorkoutDetail.js
src/components/WorkoutHistory.js
src/components/WorkoutLocationSelection.js
src/components/WorkoutSelection.js
src/index.css
src/index.js
src/logo.svg
src/reportWebVitals.js
src/ServiceWorker.js
src/setupTests.js
src/utils/db.js
tailwind.config.js

================================================================
Repository Files
================================================================

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

================
File: package.json
================
{
  "name": "zonex",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@heroicons/react": "^2.1.5",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "lucide-react": "^0.455.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^6.28.0",
    "react-scripts": "5.0.1",
    "recharts": "^2.13.3",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "autoprefixer": "^10.4.17",
    "postcss": "^8.4.35",
    "tailwindcss": "^3.4.14"
  }
}

================
File: public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

================
File: public/manifest.json
================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

================
File: README.md
================
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

================
File: src/App.css
================
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

================
File: src/App.js
================
import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Route, Routes, Navigate } from 'react-router-dom';
import Navigation from './components/Navigation';
import PrivateRoute from './components/PrivateRoute';
import Login from './components/Login';
import HomePage from './components/HomePage';
import WorkoutLocationSelection from './components/WorkoutLocationSelection';
import WorkoutSelection from './components/WorkoutSelection';
import WorkoutDetail from './components/WorkoutDetail';
import QuickPump from './components/QuickPump';
import WorkoutHistory from './components/WorkoutHistory';
import ProgressDashboard from './components/ProgressDashboard';
import Achievements from './components/Achievements';
import ExerciseLibrary from './components/ExerciseLibrary';
import Settings from './components/Settings';

const workoutPrograms = {
  arms: {
    id: 'arms',
    name: 'Arms & Upper Body',
    type: 'strength',
    location: 'gym',
    targetMuscles: ['biceps', 'triceps', 'shoulders', 'chest', 'back'],
    duration: '45-60 min',
    difficulty: 'Intermediate',
    calories: '300-400',
    description: 'Complete upper body workout focusing on arms and auxiliary muscle groups',
    exercises: [
      {
        name: 'Overhead Press Machine',
        defaultSets: 4,
        defaultReps: '15',
        defaultWeight: 50,
        notes: [
          'Alternate between outside and inner grip',
          '2 sets with each grip position',
          'Start with 50lbs and adjust based on form'
        ],
        muscles: ['shoulders', 'triceps']
      },
      {
        name: 'Arm Extension Machine',
        defaultSets: 3,
        defaultReps: '15',
        defaultWeight: 50,
        notes: [
          'Keep elbows stable throughout movement',
          'Focus on tricep contraction'
        ],
        muscles: ['triceps']
      },
      {
        name: 'Arm Curl Machine',
        defaultSets: 3,
        defaultReps: '10',
        defaultWeight: 50,
        notes: [
          'Control the negative portion of the movement',
          'Keep back straight against pad'
        ],
        muscles: ['biceps']
      },
      {
        name: 'Chest Press (Large)',
        defaultSets: 4,
        defaultReps: ['15', '15', '15', '10'],
        defaultWeight: [70, 70, 70, 90],
        notes: [
          'Increase weight for final set',
          'Maintain full range of motion'
        ],
        muscles: ['chest', 'triceps', 'shoulders']
      }
    ]
  },
  abs: {
    id: 'abs',
    name: 'Core & Abs',
    type: 'strength',
    location: 'gym',
    exercises: [
      { name: 'Burpees', sets: 3, reps: '30 sec', rest: '30 sec' },
      { name: 'Mountain Climbers', sets: 3, reps: '30 sec', rest: '30 sec' },
      { name: 'Jump Rope', sets: 3, reps: '30 sec', rest: '30 sec' },
    ] // To be filled in later
  },
  legs: {
    id: 'legs',
    name: 'Legs & Lower Body',
    type: 'strength',
    location: 'gym',
    exercises: [
      { name: 'Burpees', sets: 3, reps: '30 sec', rest: '30 sec' },
      { name: 'Mountain Climbers', sets: 3, reps: '30 sec', rest: '30 sec' },
      { name: 'Jump Rope', sets: 3, reps: '30 sec', rest: '30 sec' },
    ] // To be filled in later
  },
  hiit: {
    id: 'hiit',
    name: 'HIIT Workout',
    type: 'cardio',
    location: 'home',
    exercises: [
      { name: 'Burpees', sets: 3, reps: '30 sec', rest: '30 sec' },
      { name: 'Mountain Climbers', sets: 3, reps: '30 sec', rest: '30 sec' },
      { name: 'Jump Rope', sets: 3, reps: '30 sec', rest: '30 sec' },
    ]
  },
  cardio: {
    id: 'cardio',
    name: 'Cardio Blast',
    type: 'cardio',
    location: 'home',
    exercises: [
      { name: 'Running', sets: 1, reps: '20 min', rest: 'none' },
      { name: 'Jumping Jacks', sets: 3, reps: '50', rest: '1 min' },
      { name: 'High Knees', sets: 3, reps: '1 min', rest: '30 sec' },
    ]
  }
};

function App() {
  const [user, setUser] = useState(() => {
    const savedUser = localStorage.getItem('user');
    return savedUser ? JSON.parse(savedUser) : null;
  });

  const [workouts, setWorkouts] = useState(() => {
    const savedWorkouts = localStorage.getItem('workouts');
    return savedWorkouts ? JSON.parse(savedWorkouts) : [];
  });

  const [darkMode, setDarkMode] = useState(() => {
    const savedMode = localStorage.getItem('darkMode');
    return savedMode ? JSON.parse(savedMode) : false;
  });

  useEffect(() => {
    localStorage.setItem('workouts', JSON.stringify(workouts));
  }, [workouts]);

  useEffect(() => {
    localStorage.setItem('darkMode', JSON.stringify(darkMode));
    if (darkMode) {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }, [darkMode]);

  const login = async (username, password) => {
    if (username && password) {
      const user = { id: 1, username };
      setUser(user);
      localStorage.setItem('user', JSON.stringify(user));
      return true;
    }
    return false;
  };

  const logout = () => {
    setUser(null);
    localStorage.removeItem('user');
  };

  const toggleDarkMode = () => {
    setDarkMode(!darkMode);
  };

  const addWorkout = (workout) => {
    const newWorkout = {
      ...workout,
      id: Date.now(),
      date: new Date().toISOString(),
      userId: user.id
    };
    setWorkouts([...workouts, newWorkout]);
  };

  return (
    <Router>
      <div className={`min-h-screen bg-gray-50 dark:bg-gray-900 ${darkMode ? 'dark' : ''}`}>
        {user && (
          <header className="sticky top-0 z-50 bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700">
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
              <div className="flex justify-between items-center h-16">
                <div className="flex items-center">
                  <h1 className="text-2xl font-bold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent">
                    ZoneX
                  </h1>
                  <span className="ml-4 text-sm text-gray-500 dark:text-gray-400">
                    Welcome, {user.username}
                  </span>
                </div>
                <div className="flex items-center space-x-4">
                  <button
                    onClick={toggleDarkMode}
                    className="p-2 rounded-lg text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
                    aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}
                  >
                    {darkMode ? (
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
                      </svg>
                    ) : (
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
                      </svg>
                    )}
                  </button>
                  <button
                    onClick={logout}
                    className="px-4 py-2 rounded-lg bg-gradient-to-r from-purple-600 to-blue-600 text-white font-semibold hover:from-purple-700 hover:to-blue-700 transition-all transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2"
                  >
                    Logout
                  </button>
                </div>
              </div>
            </div>
          </header>
        )}

        <main className="max-w-7xl mx-auto pb-20">
          <Routes>
            <Route path="/login" element={<Login onLogin={login} />} />
            <Route
              path="/"
              element={
                <PrivateRoute user={user}>
                  <HomePage />
                </PrivateRoute>
              }
            />
            <Route
              path="/select-location"
              element={
                <PrivateRoute user={user}>
                  <WorkoutLocationSelection />
                </PrivateRoute>
              }
            />
            <Route
              path="/workouts/:location"
              element={
                <PrivateRoute user={user}>
                  <WorkoutSelection workouts={Object.values(workoutPrograms)} />
                </PrivateRoute>
              }
            />
            <Route
              path="/workout/:id"
              element={
                <PrivateRoute user={user}>
                  <WorkoutDetail
                    workoutPrograms={workoutPrograms}
                    onFinish={addWorkout}
                  />
                </PrivateRoute>
              }
            />
            <Route
              path="/quick-pump"
              element={
                <PrivateRoute user={user}>
                  <QuickPump />
                </PrivateRoute>
              }
            />
            <Route
              path="/history"
              element={
                <PrivateRoute user={user}>
                  <WorkoutHistory workouts={workouts} />
                </PrivateRoute>
              }
            />
            <Route
              path="/progress"
              element={
                <PrivateRoute user={user}>
                  <ProgressDashboard workouts={workouts} />
                </PrivateRoute>
              }
            />
            <Route
              path="/achievements"
              element={
                <PrivateRoute user={user}>
                  <Achievements workouts={workouts} />
                </PrivateRoute>
              }
            />
            <Route
              path="/exercise-library"
              element={
                <PrivateRoute user={user}>
                  <ExerciseLibrary />
                </PrivateRoute>
              }
            />
            <Route
              path="/settings"
              element={
                <PrivateRoute user={user}>
                  <Settings darkMode={darkMode} toggleDarkMode={toggleDarkMode} />
                </PrivateRoute>
              }
            />
            <Route path="*" element={<Navigate to="/" />} />
          </Routes>
        </main>

        {user && <Navigation />}
      </div>
    </Router>
  );
}

export default App;

================
File: src/App.test.js
================
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

================
File: src/components/Achievements.js
================
import React from 'react';
import { 
  Trophy,
  Dumbbell,
  Flame,
  Target,
  Timer,
  Crown,
  Medal,
  HeartPulse,
  Zap,
  Swords,
  Gem,
  Lock,
  Warehouse
} from 'lucide-react';

function Achievements({ workouts }) {
  const calculateTotalVolume = (workout) => {
    return workout.exercises.reduce((sum, exercise) => {
      if (!exercise.sets) return sum;
      return sum + exercise.sets.reduce((setSum, set) => {
        return setSum + (Number(set.weight) * Number(set.reps) || 0);
      }, 0);
    }, 0);
  };

  const getConsecutiveDays = () => {
    if (!workouts.length) return 0;
    let maxStreak = 1;
    let currentStreak = 1;
    const sortedWorkouts = [...workouts].sort((a, b) => new Date(a.date) - new Date(b.date));
    
    for (let i = 1; i < sortedWorkouts.length; i++) {
      const prevDate = new Date(sortedWorkouts[i-1].date);
      const currDate = new Date(sortedWorkouts[i].date);
      const diffTime = Math.abs(currDate - prevDate);
      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
      
      if (diffDays === 1) {
        currentStreak++;
        maxStreak = Math.max(maxStreak, currentStreak);
      } else {
        currentStreak = 1;
      }
    }
    return maxStreak;
  };

  const achievementCriteria = [
    // Beginner Achievements
    {
      id: 'first-workout',
      name: 'First Step',
      description: 'Complete your first workout',
      icon: Dumbbell,
      tier: 'bronze',
      isEarned: workouts.length > 0
    },
    {
      id: 'volume-warrior',
      name: 'Volume Warrior',
      description: 'Lift 20,000 lbs in a single workout',
      icon: Warehouse,
      tier: 'bronze',
      isEarned: workouts.some(w => calculateTotalVolume(w) >= 20000)
    },
    {
      id: 'consistency',
      name: 'Consistency',
      description: 'Complete 10 workouts',
      icon: Target,
      tier: 'bronze',
      isEarned: workouts.length >= 10
    },

    // Intermediate Achievements
    {
      id: 'dedication',
      name: 'Dedication',
      description: 'Work out 5 days in a row',
      icon: Timer,
      tier: 'silver',
      isEarned: getConsecutiveDays() >= 5
    },
    {
      id: 'heavy-lifter',
      name: 'Heavy Lifter',
      description: 'Lift 40,000 lbs in a single workout',
      icon: Swords,
      tier: 'silver',
      isEarned: workouts.some(w => calculateTotalVolume(w) >= 40000)
    },
    {
      id: 'workout-master',
      name: 'Workout Master',
      description: 'Complete 50 workouts',
      icon: Medal,
      tier: 'silver',
      isEarned: workouts.length >= 50
    },

    // Advanced Achievements
    {
      id: 'elite-volume',
      name: 'Elite Volume',
      description: 'Lift 60,000 lbs in a single workout',
      icon: Crown,
      tier: 'gold',
      isEarned: workouts.some(w => calculateTotalVolume(w) >= 60000)
    },
    {
      id: 'iron-warrior',
      name: 'Iron Warrior',
      description: 'Work out 10 days in a row',
      icon: Flame,
      tier: 'gold',
      isEarned: getConsecutiveDays() >= 10
    },
    {
      id: 'century-club',
      name: 'Century Club',
      description: 'Complete 100 workouts',
      icon: Trophy,
      tier: 'gold',
      isEarned: workouts.length >= 100
    },

    // Expert Achievements
    {
      id: 'legendary-lifter',
      name: 'Legendary Lifter',
      description: 'Lift 100,000 lbs in a single workout',
      icon: Gem,
      tier: 'diamond',
      isEarned: workouts.some(w => calculateTotalVolume(w) >= 100000)
    },
    {
      id: 'ultimate-warrior',
      name: 'Ultimate Warrior',
      description: 'Work out 15 days in a row',
      icon: HeartPulse,
      tier: 'diamond',
      isEarned: getConsecutiveDays() >= 15
    },
    {
      id: 'gym-legend',
      name: 'Gym Legend',
      description: 'Complete 200 workouts',
      icon: Zap,
      tier: 'diamond',
      isEarned: workouts.length >= 200
    }
  ];

  const getTierColor = (tier) => {
    switch (tier) {
      case 'bronze':
        return 'from-amber-600 to-amber-700';
      case 'silver':
        return 'from-slate-400 to-slate-500';
      case 'gold':
        return 'from-yellow-400 to-yellow-500';
      case 'diamond':
        return 'from-blue-400 to-blue-500';
      default:
        return 'from-gray-400 to-gray-500';
    }
  };

  const tiers = ['bronze', 'silver', 'gold', 'diamond'];

  return (
    <div className="max-w-7xl mx-auto px-4 py-8">
      <div className="mb-8">
        <h2 className="text-2xl font-bold text-gray-900 dark:text-white">
          Achievements
        </h2>
        <p className="mt-2 text-gray-600 dark:text-gray-400">
          Track your fitness milestones and unlock achievements
        </p>
      </div>

      {tiers.map(tier => (
        <div key={tier} className="mb-8">
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white capitalize mb-4">
            {tier} Tier
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {achievementCriteria
              .filter(achievement => achievement.tier === tier)
              .map(achievement => (
                <div
                  key={achievement.id}
                  className={`relative overflow-hidden bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700 ${
                    achievement.isEarned ? 'bg-opacity-100' : 'bg-opacity-50'
                  }`}
                >
                  <div className="flex items-start gap-4">
                    <div className={`p-3 rounded-xl bg-gradient-to-br ${getTierColor(achievement.tier)}`}>
                      {achievement.isEarned ? (
                        <achievement.icon className="w-6 h-6 text-white" />
                      ) : (
                        <Lock className="w-6 h-6 text-white opacity-50" />
                      )}
                    </div>
                    <div>
                      <h4 className="text-lg font-semibold text-gray-900 dark:text-white">
                        {achievement.name}
                      </h4>
                      <p className="text-sm text-gray-500 dark:text-gray-400">
                        {achievement.description}
                      </p>
                      {achievement.isEarned && (
                        <span className="mt-2 inline-block px-2 py-1 text-xs font-medium text-green-700 bg-green-100 rounded-full">
                          Achieved
                        </span>
                      )}
                    </div>
                  </div>
                </div>
              ))}
          </div>
        </div>
      ))}
    </div>
  );
}

export default Achievements;

================
File: src/components/Exercise.js
================
import React, { useState, useEffect } from 'react';
import { PlusCircle, MinusCircle, Info } from 'lucide-react';
import { CheckIcon } from '@heroicons/react/24/solid';

function Exercise({ exercise, data, onChange, onAddSet, onRemoveSet }) {
  const [showNotes, setShowNotes] = useState(false);
  
  useEffect(() => {
    if (!data?.sets) {
      const initialSets = new Array(exercise.defaultSets).fill().map((_, index) => ({
        reps: Array.isArray(exercise.defaultReps) ? exercise.defaultReps[index] : exercise.defaultReps,
        weight: Array.isArray(exercise.defaultWeight) ? exercise.defaultWeight[index] : exercise.defaultWeight,
        rest: '60',
        completed: false
      }));
      onChange(exercise.name, 'sets', initialSets);
    }
  }, [exercise, data, onChange]);

  const sets = data?.sets || [];

  const handleSetChange = (setIndex, field, value) => {
    const newSets = [...sets];
    newSets[setIndex] = {
      ...newSets[setIndex],
      [field]: value
    };

    const currentSet = newSets[setIndex];
    const isCompleted = 
      currentSet.weight && 
      currentSet.weight.toString().trim() !== '' &&
      currentSet.reps && 
      currentSet.reps.toString().trim() !== '';

    newSets[setIndex].completed = isCompleted;
    onChange(exercise.name, 'sets', newSets);
  };

  return (
    <div className="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700">
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center space-x-3">
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
            {exercise.name}
          </h3>
          <button
            onClick={() => setShowNotes(!showNotes)}
            className="p-1 text-gray-400 hover:text-gray-600 transition-colors"
            title="Show notes"
          >
            <Info className="w-5 h-5" />
          </button>
        </div>
        <div className="flex items-center space-x-2">
          <button
            onClick={() => onAddSet(exercise.name)}
            className="p-1 text-emerald-600 hover:text-emerald-700 transition-colors"
            title="Add set"
          >
            <PlusCircle className="w-5 h-5" />
          </button>
          {sets.length > 1 && (
            <button
              onClick={() => onRemoveSet(exercise.name)}
              className="p-1 text-rose-600 hover:text-rose-700 transition-colors"
              title="Remove set"
            >
              <MinusCircle className="w-5 h-5" />
            </button>
          )}
        </div>
      </div>

      {showNotes && exercise.notes && (
        <div className="mb-4 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
          <h4 className="font-medium text-gray-900 dark:text-white mb-2">Notes:</h4>
          <ul className="list-disc list-inside space-y-1">
            {exercise.notes.map((note, index) => (
              <li key={index} className="text-sm text-gray-600 dark:text-gray-300">
                {note}
              </li>
            ))}
          </ul>
          <div className="mt-2 flex flex-wrap gap-2">
            {exercise.muscles.map((muscle) => (
              <span 
                key={muscle}
                className="px-2 py-1 text-xs font-medium text-blue-600 bg-blue-100 rounded-full"
              >
                {muscle}
              </span>
            ))}
          </div>
        </div>
      )}

      <div className="space-y-3">
        <div className="grid grid-cols-5 gap-4 text-sm font-medium text-gray-500 dark:text-gray-400 px-2">
          <div>Set</div>
          <div>Weight (lbs)</div>
          <div>Reps</div>
          <div>Rest (sec)</div>
          <div>Completed</div>
        </div>

        {sets.map((set, index) => (
          <div 
            key={index}
            className="grid grid-cols-5 gap-4 items-center bg-gray-50 dark:bg-gray-700 p-2 rounded-lg"
          >
            <div className="text-sm font-medium text-gray-700 dark:text-gray-300">
              Set {index + 1}
            </div>
            <input
              type="number"
              value={set.weight || ''}
              onChange={(e) => handleSetChange(index, 'weight', e.target.value)}
              className="block w-full px-3 py-1.5 text-sm border border-gray-300 rounded-md 
                focus:ring-2 focus:ring-blue-500 focus:border-transparent
                dark:bg-gray-600 dark:border-gray-500 dark:text-white"
              placeholder="Weight"
            />
            <input
              type="text"
              value={set.reps || ''}
              onChange={(e) => handleSetChange(index, 'reps', e.target.value)}
              className="block w-full px-3 py-1.5 text-sm border border-gray-300 rounded-md 
                focus:ring-2 focus:ring-blue-500 focus:border-transparent
                dark:bg-gray-600 dark:border-gray-500 dark:text-white"
              placeholder="Reps"
            />
            <input
              type="number"
              value={set.rest || '60'}
              onChange={(e) => handleSetChange(index, 'rest', e.target.value)}
              className="block w-full px-3 py-1.5 text-sm border border-gray-300 rounded-md 
                focus:ring-2 focus:ring-blue-500 focus:border-transparent
                dark:bg-gray-600 dark:border-gray-500 dark:text-white"
              placeholder="Rest"
            />
            <div className="flex justify-center">
              <div className={`w-6 h-6 rounded-full flex items-center justify-center ${
                set.completed 
                  ? 'bg-emerald-500' 
                  : 'bg-gray-200 dark:bg-gray-600'
              }`}>
                <CheckIcon className="w-4 h-4 text-white" />
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

export default Exercise;

================
File: src/components/ExerciseLibrary.js
================
import React, { useState, useMemo } from 'react';
import { 
  Search,
  Filter,
  Plus,
  Dumbbell,
  ChevronDown,
  Info,
  Tag,
  Clock,
  Flame,
  Target,
  BarChart,
  Edit,
  Trash2,
  Save
} from 'lucide-react';

const defaultExercises = [
  {
    id: 'bench-press',
    name: 'Bench Press',
    category: 'compound',
    equipment: ['barbell', 'bench'],
    primaryMuscles: ['chest'],
    secondaryMuscles: ['triceps', 'shoulders'],
    difficulty: 'intermediate',
    mechanics: 'push',
    force: 'push',
    preparation: [
      'Lie flat on bench with feet on ground',
      'Grip bar slightly wider than shoulder width',
      'Unrack bar with straight arms'
    ],
    execution: [
      'Lower bar to mid-chest',
      'Press bar up in slight arc',
      'Lock out elbows at top'
    ],
    tips: [
      'Keep feet flat on ground',
      'Maintain natural arch in lower back',
      'Keep elbows at roughly 45-degree angle'
    ],
    commonMistakes: [
      'Bouncing bar off chest',
      'Flaring elbows too wide',
      'Lifting hips off bench'
    ],
    recommendedSets: '3-5',
    recommendedReps: '5-12',
    restPeriod: '60-180',
    tempo: '2-1-2',
    personalBest: 0
  },
  {
    id: 'squat',
    name: 'Barbell Squat',
    category: 'compound',
    equipment: ['barbell', 'rack'],
    primaryMuscles: ['quadriceps', 'glutes'],
    secondaryMuscles: ['hamstrings', 'calves', 'core'],
    difficulty: 'advanced',
    mechanics: 'push',
    force: 'push',
    preparation: [
      'Position bar on upper back',
      'Feet shoulder-width apart',
      'Brace core and unrack'
    ],
    execution: [
      'Break at hips and knees',
      'Lower until thighs parallel',
      'Drive through heels to stand'
    ],
    tips: [
      'Keep chest up',
      'Track knees over toes',
      'Maintain neutral spine'
    ],
    commonMistakes: [
      'Knees caving in',
      'Rounding lower back',
      'Rising on toes'
    ],
    recommendedSets: '3-5',
    recommendedReps: '5-10',
    restPeriod: '120-180',
    tempo: '2-1-2',
    personalBest: 0
  }
];

const muscleGroups = {
  primaryMuscles: [
    'chest', 'back', 'shoulders', 'biceps', 'triceps', 
    'quadriceps', 'hamstrings', 'glutes', 'calves', 'core'
  ],
  secondaryMuscles: [
    'chest', 'back', 'shoulders', 'biceps', 'triceps', 
    'quadriceps', 'hamstrings', 'glutes', 'calves', 'core'
  ]
};

const equipment = [
  'barbell', 'dumbbell', 'kettlebell', 'machine', 
  'cable', 'bodyweight', 'bands', 'bench', 'rack'
];

const categories = ['compound', 'isolation'];
const difficulties = ['beginner', 'intermediate', 'advanced'];
const mechanics = ['push', 'pull', 'legs', 'core'];

function ExerciseLibrary() {
  const [exercises, setExercises] = useState(defaultExercises);
  const [searchQuery, setSearchQuery] = useState('');
  const [filters, setFilters] = useState({
    category: '',
    equipment: '',
    primaryMuscles: '',
    difficulty: ''
  });
  const [showFilters, setShowFilters] = useState(false);
  const [selectedExercise, setSelectedExercise] = useState(null);
  const [editMode, setEditMode] = useState(false);
  const [editingExercise, setEditingExercise] = useState(null);
  const [showAddForm, setShowAddForm] = useState(false);

  const filteredExercises = useMemo(() => {
    return exercises.filter(exercise => {
      const matchesSearch = exercise.name.toLowerCase().includes(searchQuery.toLowerCase());
      const matchesCategory = !filters.category || exercise.category === filters.category;
      const matchesEquipment = !filters.equipment || exercise.equipment.includes(filters.equipment);
      const matchesMuscle = !filters.primaryMuscles || exercise.primaryMuscles.includes(filters.primaryMuscles);
      const matchesDifficulty = !filters.difficulty || exercise.difficulty === filters.difficulty;
      
      return matchesSearch && matchesCategory && matchesEquipment && matchesMuscle && matchesDifficulty;
    });
  }, [exercises, searchQuery, filters]);

  const handleAddExercise = (newExercise) => {
    setExercises([...exercises, { ...newExercise, id: Date.now().toString() }]);
    setShowAddForm(false);
  };

  const handleUpdateExercise = (updatedExercise) => {
    setExercises(exercises.map(ex => 
      ex.id === updatedExercise.id ? updatedExercise : ex
    ));
    setEditMode(false);
    setEditingExercise(null);
  };

  const handleDeleteExercise = (id) => {
    setExercises(exercises.filter(ex => ex.id !== id));
    setSelectedExercise(null);
  };

  const ExerciseForm = ({ exercise, onSubmit, isEditing }) => (
    <form 
      onSubmit={(e) => {
        e.preventDefault();
        // Handle form submission
        // Collect all form data and call onSubmit
      }}
      className="space-y-6"
    >
      {/* Form fields would go here */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
            Name
          </label>
          <input
            type="text"
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
            defaultValue={exercise?.name || ''}
          />
        </div>
        {/* Add more form fields */}
      </div>
      
      <div className="flex justify-end space-x-4">
        <button
          type="button"
          onClick={() => {
            setShowAddForm(false);
            setEditMode(false);
          }}
          className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
        >
          Cancel
        </button>
        <button
          type="submit"
          className="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700"
        >
          {isEditing ? 'Update' : 'Add'} Exercise
        </button>
      </div>
    </form>
  );

  return (
    <div className="max-w-7xl mx-auto px-4 py-8">
      {/* Header */}
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8">
        <div>
          <h2 className="text-2xl font-bold text-gray-900 dark:text-white">
            Exercise Library
          </h2>
          <p className="mt-1 text-gray-500 dark:text-gray-400">
            Browse, search, and manage your exercise collection
          </p>
        </div>
        <button
          onClick={() => setShowAddForm(true)}
          className="flex items-center gap-2 px-4 py-2 text-white bg-blue-600 rounded-lg hover:bg-blue-700 transition-colors"
        >
          <Plus className="w-4 h-4" />
          Add Exercise
        </button>
      </div>

      {/* Search and Filters */}
      <div className="mb-6 space-y-4">
        <div className="flex flex-col md:flex-row gap-4">
          <div className="relative flex-1">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
            <input
              type="text"
              placeholder="Search exercises..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="w-full pl-10 pr-4 py-2 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <button
            onClick={() => setShowFilters(!showFilters)}
            className="flex items-center gap-2 px-4 py-2 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700"
          >
            <Filter className="w-4 h-4" />
            Filters
            <ChevronDown className={`w-4 h-4 transform transition-transform ${showFilters ? 'rotate-180' : ''}`} />
          </button>
        </div>

        {/* Filter Panel */}
        {showFilters && (
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Category
              </label>
              <select
                value={filters.category}
                onChange={(e) => setFilters({ ...filters, category: e.target.value })}
                className="w-full rounded-md border-gray-300 dark:border-gray-700 dark:bg-gray-700"
              >
                <option value="">All Categories</option>
                {categories.map(cat => (
                  <option key={cat} value={cat}>{cat.charAt(0).toUpperCase() + cat.slice(1)}</option>
                ))}
              </select>
            </div>
            {/* Add more filter selects */}
          </div>
        )}
      </div>

      {/* Exercise List and Detail View */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* Exercise List */}
        <div className="lg:col-span-1 space-y-4">
          {filteredExercises.map(exercise => (
            <div
              key={exercise.id}
              onClick={() => setSelectedExercise(exercise)}
              className={`p-4 bg-white dark:bg-gray-800 rounded-lg border cursor-pointer transition-colors ${
                selectedExercise?.id === exercise.id
                  ? 'border-blue-500'
                  : 'border-gray-200 dark:border-gray-700 hover:border-blue-300'
              }`}
            >
              <div className="flex items-start justify-between">
                <div>
                  <h3 className="font-semibold text-gray-900 dark:text-white">
                    {exercise.name}
                  </h3>
                  <div className="mt-1 flex flex-wrap gap-2">
                    {exercise.primaryMuscles.map(muscle => (
                      <span
                        key={muscle}
                        className="inline-flex items-center px-2 py-1 text-xs font-medium text-blue-700 bg-blue-100 rounded-full"
                      >
                        {muscle}
                      </span>
                    ))}
                  </div>
                </div>
                <span className={`text-xs font-medium px-2 py-1 rounded-full ${
                  exercise.difficulty === 'beginner' ? 'bg-green-100 text-green-700' :
                  exercise.difficulty === 'intermediate' ? 'bg-yellow-100 text-yellow-700' :
                  'bg-red-100 text-red-700'
                }`}>
                  {exercise.difficulty}
                </span>
              </div>
            </div>
          ))}
        </div>

        {/* Exercise Detail */}
        {selectedExercise && (
          <div className="lg:col-span-2 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6">
            <div className="flex justify-between items-start mb-6">
              <div>
                <h2 className="text-2xl font-bold text-gray-900 dark:text-white">
                  {selectedExercise.name}
                </h2>
                <p className="text-gray-500 dark:text-gray-400 mt-1">
                  {selectedExercise.category.charAt(0).toUpperCase() + selectedExercise.category.slice(1)} Exercise
                </p>
              </div>
              <div className="flex gap-2">
                <button
                  onClick={() => {
                    setEditMode(true);
                    setEditingExercise(selectedExercise);
                  }}
                  className="p-2 text-gray-500 hover:text-blue-500"
                >
                  <Edit className="w-5 h-5" />
                </button>
                <button
                  onClick={() => handleDeleteExercise(selectedExercise.id)}
                  className="p-2 text-gray-500 hover:text-red-500"
                >
                  <Trash2 className="w-5 h-5" />
                </button>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
              <div className="space-y-4">
                <div>
                  <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400">
                    Equipment Needed
                  </h3>
                  <div className="mt-2 flex flex-wrap gap-2">
                    {selectedExercise.equipment.map(item => (
                      <span
                        key={item}
                        className="inline-flex items-center px-2 py-1 text-sm font-medium text-gray-700 bg-gray-100 rounded-full"
                      >
                        {item}
                      </span>
                    ))}
                  </div>
                </div>

                <div>
                  <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400">
                    Primary Muscles
                  </h3>
                  <div className="mt-2 flex flex-wrap gap-2">
                  {selectedExercise.primaryMuscles.map(muscle => (
                      <span
                        key={muscle}
                        className="inline-flex items-center px-2 py-1 text-sm font-medium text-blue-700 bg-blue-100 rounded-full"
                      >
                        {muscle}
                      </span>
                    ))}
                  </div>
                </div>

                <div>
                  <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400">
                    Secondary Muscles
                  </h3>
                  <div className="mt-2 flex flex-wrap gap-2">
                    {selectedExercise.secondaryMuscles.map(muscle => (
                      <span
                        key={muscle}
                        className="inline-flex items-center px-2 py-1 text-sm font-medium text-purple-700 bg-purple-100 rounded-full"
                      >
                        {muscle}
                      </span>
                    ))}
                  </div>
                </div>
              </div>

              <div className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400 flex items-center gap-2">
                      <Clock className="w-4 h-4" />
                      Rest Period
                    </h3>
                    <p className="mt-1 text-gray-900 dark:text-white">
                      {selectedExercise.restPeriod} seconds
                    </p>
                  </div>
                  <div>
                    <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400 flex items-center gap-2">
                      <Flame className="w-4 h-4" />
                      Difficulty
                    </h3>
                    <p className="mt-1 text-gray-900 dark:text-white capitalize">
                      {selectedExercise.difficulty}
                    </p>
                  </div>
                  <div>
                    <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400 flex items-center gap-2">
                      <Target className="w-4 h-4" />
                      Sets
                    </h3>
                    <p className="mt-1 text-gray-900 dark:text-white">
                      {selectedExercise.recommendedSets}
                    </p>
                  </div>
                  <div>
                    <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400 flex items-center gap-2">
                      <BarChart className="w-4 h-4" />
                      Reps
                    </h3>
                    <p className="mt-1 text-gray-900 dark:text-white">
                      {selectedExercise.recommendedReps}
                    </p>
                  </div>
                </div>
                
                <div>
                  <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400">
                    Personal Best
                  </h3>
                  <p className="mt-1 text-gray-900 dark:text-white">
                    {selectedExercise.personalBest || 'Not set'} lbs
                  </p>
                </div>
              </div>
            </div>

            <div className="space-y-6">
              <div>
                <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
                  Preparation
                </h3>
                <ul className="list-disc pl-5 space-y-1">
                  {selectedExercise.preparation.map((step, index) => (
                    <li key={index} className="text-gray-600 dark:text-gray-300">
                      {step}
                    </li>
                  ))}
                </ul>
              </div>

              <div>
                <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
                  Execution
                </h3>
                <ul className="list-disc pl-5 space-y-1">
                  {selectedExercise.execution.map((step, index) => (
                    <li key={index} className="text-gray-600 dark:text-gray-300">
                      {step}
                    </li>
                  ))}
                </ul>
              </div>

              <div>
                <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
                  Tips
                </h3>
                <ul className="list-disc pl-5 space-y-1">
                  {selectedExercise.tips.map((tip, index) => (
                    <li key={index} className="text-gray-600 dark:text-gray-300">
                      {tip}
                    </li>
                  ))}
                </ul>
              </div>

              <div>
                <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
                  Common Mistakes
                </h3>
                <ul className="list-disc pl-5 space-y-1 text-red-600 dark:text-red-400">
                  {selectedExercise.commonMistakes.map((mistake, index) => (
                    <li key={index}>
                      {mistake}
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          </div>
        )}

        {/* Add/Edit Form Modal */}
        {(showAddForm || editMode) && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
            <div className="bg-white dark:bg-gray-800 rounded-xl p-6 max-w-2xl w-full max-h-[90vh] overflow-y-auto">
              <h2 className="text-xl font-bold mb-4">
                {editMode ? 'Edit Exercise' : 'Add New Exercise'}
              </h2>
              <ExerciseForm
                exercise={editingExercise}
                onSubmit={editMode ? handleUpdateExercise : handleAddExercise}
                isEditing={editMode}
              />
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

export default ExerciseLibrary;

================
File: src/components/HomePage.js
================
import React from 'react';
import { Link } from 'react-router-dom';
import { 
  Dumbbell, 
  Trophy, 
  History, 
  BarChart2,
  Flame,
  Clock,
  Calendar,
  TrendingUp
} from 'lucide-react';

function HomePage({ workouts = [] }) {
  // Calculate stats from workout history
  const totalWorkouts = workouts.length;
  const thisWeekWorkouts = workouts.filter(workout => {
    const workoutDate = new Date(workout.date);
    const today = new Date();
    const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
    return workoutDate >= weekAgo;
  }).length;

  const latestStreak = workouts.reduce((streak, workout, index) => {
    if (index === 0) return 1;
    const currentDate = new Date(workout.date);
    const prevDate = new Date(workouts[index - 1].date);
    const dayDiff = (currentDate - prevDate) / (1000 * 60 * 60 * 24);
    return dayDiff <= 1 ? streak + 1 : 1;
  }, 0);

  const totalMinutes = workouts.reduce((total, workout) => {
    return total + workout.exercises.reduce((exerciseTotal, exercise) => {
      return exerciseTotal + (exercise.duration || 0);
    }, 0);
  }, 0);

  const stats = [
    { 
      title: 'Total Workouts',
      value: totalWorkouts,
      icon: Flame,
      color: 'bg-rose-100 text-rose-500'
    },
    {
      title: 'This Week',
      value: thisWeekWorkouts,
      icon: Calendar,
      color: 'bg-sky-100 text-sky-500'
    },
    {
      title: 'Current Streak',
      value: `${latestStreak} days`,
      icon: TrendingUp,
      color: 'bg-emerald-100 text-emerald-500'
    },
    {
      title: 'Total Minutes',
      value: totalMinutes,
      icon: Clock,
      color: 'bg-violet-100 text-violet-500'
    }
  ];

  const quickActions = [
    { 
      title: 'Start Workout',
      description: 'Begin your fitness journey',
      icon: Dumbbell,
      to: '/select-location',
      color: 'bg-blue-50 hover:bg-blue-100 text-blue-600'
    },
    {
      title: 'View Progress',
      description: 'Track your metrics',
      icon: BarChart2,
      to: '/progress',
      color: 'bg-emerald-50 hover:bg-emerald-100 text-emerald-600'
    },
    {
      title: 'Workout History',
      description: 'Review past workouts',
      icon: History,
      to: '/history',
      color: 'bg-purple-50 hover:bg-purple-100 text-purple-600'
    },
    {
      title: 'Achievements',
      description: 'Check your milestones',
      icon: Trophy,
      to: '/achievements',
      color: 'bg-amber-50 hover:bg-amber-100 text-amber-600'
    }
  ];

  return (
    <div className="max-w-4xl mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-8 text-gray-800 dark:text-white">
        Dashboard
      </h1>

      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">
        {stats.map((stat) => (
          <div key={stat.title} className="bg-white dark:bg-gray-800 rounded-xl p-4 shadow-sm">
            <div className={`w-10 h-10 rounded-lg ${stat.color} flex items-center justify-center mb-3`}>
              <stat.icon className="w-5 h-5" />
            </div>
            <p className="text-sm text-gray-500 dark:text-gray-400">{stat.title}</p>
            <p className="text-2xl font-semibold text-gray-900 dark:text-white">{stat.value}</p>
          </div>
        ))}
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {quickActions.map((action) => (
          <Link
            key={action.title}
            to={action.to}
            className={`group flex items-start p-6 rounded-xl transition-all ${action.color}`}
          >
            <div className="flex-shrink-0">
              <action.icon className="h-6 w-6" />
            </div>
            <div className="ml-4">
              <h3 className="font-semibold text-lg mb-1">
                {action.title}
              </h3>
              <p className="text-gray-600 dark:text-gray-400">
                {action.description}
              </p>
            </div>
          </Link>
        ))}
      </div>
    </div>
  );
}

export default HomePage;

================
File: src/components/Login.js
================
import React, { useState } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';

function Login({ onLogin }) {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const navigate = useNavigate();
  const location = useLocation();

  const from = location.state?.from?.pathname || "/";

  const handleSubmit = async (e) => {
    e.preventDefault();
    await onLogin(username, password);
    navigate(from, { replace: true });
  };

  return (
    <div className="flex justify-center items-center min-h-screen">
      <form onSubmit={handleSubmit} className="bg-white dark:bg-gray-800 shadow-md rounded-lg p-6 w-full max-w-md">
        <h2 className="text-2xl font-semibold mb-6 text-center">Login</h2>
        <div className="mb-4">
          <label htmlFor="username" className="block text-gray-700 dark:text-gray-200 font-semibold mb-2">
            Username:
          </label>
          <input
            type="text"
            id="username"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
            className="w-full px-3 py-2 text-gray-700 dark:text-gray-200 border rounded-md focus:outline-none focus:ring focus:border-blue-300 dark:bg-gray-700 dark:border-gray-600 dark:focus:border-blue-600"
          />
        </div>
        <div className="mb-6">
          <label htmlFor="password" className="block text-gray-700 dark:text-gray-200 font-semibold mb-2">
            Password:
          </label>
          <input
            type="password"
            id="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="w-full px-3 py-2 text-gray-700 dark:text-gray-200 border rounded-md focus:outline-none focus:ring focus:border-blue-300 dark:bg-gray-700 dark:border-gray-600 dark:focus:border-blue-600"
          />
        </div>
        <button
          type="submit"
          className="w-full bg-blue-500 dark:bg-blue-600 text-white font-semibold py-2 px-4 rounded-md hover:bg-blue-600 dark:hover:bg-blue-500 focus:outline-none focus:ring focus:border-blue-300"
        >
          Log in
        </button>
      </form>
    </div>
  );
}

export default Login;

================
File: src/components/Navigation.js
================
import { Fragment } from 'react'
import { Link, useLocation } from 'react-router-dom'
import { 
  HomeIcon, 
  ClockIcon, 
  ChartBarIcon, 
  TrophyIcon, 
  BookOpenIcon, 
  Settings 
} from 'lucide-react'

export default function Navigation() {
  const location = useLocation()
  
  const navigation = [
    { name: 'Home', href: '/', icon: HomeIcon },
    { name: 'History', href: '/history', icon: ClockIcon },
    { name: 'Progress', href: '/progress', icon: ChartBarIcon },
    { name: 'Achievements', href: '/achievements', icon: TrophyIcon },
    { name: 'Exercise Library', href: '/exercise-library', icon: BookOpenIcon },
    { name: 'Settings', href: '/settings', icon: Settings },
  ]

  return (
    <nav className="fixed bottom-0 left-0 right-0 bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 py-2 px-4 sm:px-6 lg:px-8">
      <div className="max-w-7xl mx-auto">
        <div className="flex justify-between items-center">
          {navigation.map((item) => {
            const isActive = location.pathname === item.href
            return (
              <Link
                key={item.name}
                to={item.href}
                className={`flex flex-col items-center p-2 rounded-lg ${
                  isActive 
                    ? 'text-primary-600 dark:text-primary-400' 
                    : 'text-gray-500 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white'
                }`}
              >
                <item.icon className="w-6 h-6" />
                <span className="text-xs mt-1">{item.name}</span>
              </Link>
            )
          })}
        </div>
      </div>
    </nav>
  )
}

================
File: src/components/PrivateRoute.js
================
import React from 'react';
import { Navigate, useLocation } from 'react-router-dom';

function PrivateRoute({ user, children }) {
  const location = useLocation();

  if (!user) {
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  return children;
}

export default PrivateRoute;

================
File: src/components/ProgressDashboard.js
================
import React, { useState, useMemo } from 'react';
import { 
  LineChart, Line, 
  BarChart, Bar, 
  XAxis, YAxis, 
  CartesianGrid, Tooltip, 
  Legend, ResponsiveContainer,
  AreaChart, Area
} from 'recharts';
import { 
  Calendar,
  TrendingUp,
  Clock,
  Dumbbell,
  ChevronDown,
  Flame,
  Activity,
  ChevronRight,
  ArrowUpDown,
  Filter
} from 'lucide-react';

function ProgressDashboard({ workouts }) {
  const [timeRange, setTimeRange] = useState('week');
  const [selectedWorkoutType, setSelectedWorkoutType] = useState(null);
  const [selectedExercise, setSelectedExercise] = useState(null);
  const [showDatePicker, setShowDatePicker] = useState(false);
  const [showFilters, setShowFilters] = useState(false);

  // Get unique workout types
  const workoutTypes = useMemo(() => {
    return [...new Set(workouts.map(w => w.name))];
  }, [workouts]);

  // Get exercises for selected workout type
  const exercises = useMemo(() => {
    if (!selectedWorkoutType) return [];
    return [...new Set(workouts
      .filter(w => w.name === selectedWorkoutType)
      .flatMap(w => w.exercises.map(e => e.name)))];
  }, [workouts, selectedWorkoutType]);

  // Process workout data based on filters
  const processedData = useMemo(() => {
    const now = new Date();
    const timeRanges = {
      week: 7,
      month: 30,
      year: 365,
      all: Infinity
    };
    
    const cutoffDate = new Date(now.getTime() - timeRanges[timeRange] * 24 * 60 * 60 * 1000);
    
    let filteredWorkouts = workouts.filter(workout => new Date(workout.date) >= cutoffDate);
    
    if (selectedWorkoutType) {
      filteredWorkouts = filteredWorkouts.filter(w => w.name === selectedWorkoutType);
    }

    return filteredWorkouts.map(workout => {
      const exerciseData = {};
      workout.exercises.forEach(exercise => {
        if (!exercise.sets) return;
        
        const totalVolume = exercise.sets.reduce((sum, set) => {
          return sum + (Number(set.weight) * Number(set.reps) || 0);
        }, 0);

        const maxWeight = Math.max(...exercise.sets.map(set => Number(set.weight) || 0));
        
        exerciseData[exercise.name] = {
          volume: totalVolume,
          maxWeight,
          sets: exercise.sets.length
        };
      });

      return {
        date: new Date(workout.date).toLocaleDateString(),
        type: workout.name,
        exercises: exerciseData,
        totalVolume: Object.values(exerciseData).reduce((sum, e) => sum + e.volume, 0),
        totalSets: Object.values(exerciseData).reduce((sum, e) => sum + e.sets, 0)
      };
    }).sort((a, b) => new Date(a.date) - new Date(b.date));
  }, [workouts, timeRange, selectedWorkoutType]);

  // Get exercise progress data
  const exerciseProgress = useMemo(() => {
    if (!selectedExercise) return [];
    
    return processedData
      .filter(workout => workout.exercises[selectedExercise])
      .map(workout => ({
        date: workout.date,
        volume: workout.exercises[selectedExercise].volume,
        maxWeight: workout.exercises[selectedExercise].maxWeight,
        sets: workout.exercises[selectedExercise].sets
      }));
  }, [processedData, selectedExercise]);

  // Calculate summary statistics
  const stats = useMemo(() => {
    if (!processedData.length) return null;

    const totalVolume = processedData.reduce((sum, day) => sum + day.totalVolume, 0);
    const totalSets = processedData.reduce((sum, day) => sum + day.totalSets, 0);
    
    return {
      totalWorkouts: processedData.length,
      totalVolume: Math.round(totalVolume),
      totalSets,
      avgVolumePerWorkout: Math.round(totalVolume / processedData.length),
      avgSetsPerWorkout: Math.round(totalSets / processedData.length),
      workoutsPerWeek: Math.round((processedData.length / (timeRange === 'week' ? 1 : timeRange === 'month' ? 4 : 52)) * 10) / 10
    };
  }, [processedData, timeRange]);

  return (
    <div className="max-w-7xl mx-auto px-4 py-8 space-y-8">
      {/* Header and Controls */}
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
        <div>
          <h2 className="text-2xl font-bold text-gray-900 dark:text-white">
            Progress Dashboard
          </h2>
          <p className="text-gray-500 dark:text-gray-400 mt-1">
            Track your fitness journey and exercise progress
          </p>
        </div>
        
        <div className="flex flex-wrap gap-3">
          <div className="relative">
            <button
              onClick={() => setShowDatePicker(!showDatePicker)}
              className="flex items-center gap-2 px-4 py-2 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 shadow-sm hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
            >
              <Calendar className="w-4 h-4" />
              {timeRange.charAt(0).toUpperCase() + timeRange.slice(1)}
              <ChevronDown className="w-4 h-4" />
            </button>
            {showDatePicker && (
              <div className="absolute top-full mt-2 w-48 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 z-10">
                {['week', 'month', 'year', 'all'].map((range) => (
                  <button
                    key={range}
                    onClick={() => {
                      setTimeRange(range);
                      setShowDatePicker(false);
                    }}
                    className="w-full text-left px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-700 first:rounded-t-lg last:rounded-b-lg"
                  >
                    {range.charAt(0).toUpperCase() + range.slice(1)}
                  </button>
                ))}
              </div>
            )}
          </div>

          <button
            onClick={() => setShowFilters(!showFilters)}
            className="flex items-center gap-2 px-4 py-2 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 shadow-sm hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
          >
            <Filter className="w-4 h-4" />
            Filters
            <ChevronDown className={`w-4 h-4 transform transition-transform ${showFilters ? 'rotate-180' : ''}`} />
          </button>
        </div>
      </div>

      {/* Filters Panel */}
      {showFilters && (
        <div className="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700">
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Workout Type
              </label>
              <div className="flex flex-wrap gap-2">
                {workoutTypes.map((type) => (
                  <button
                    key={type}
                    onClick={() => setSelectedWorkoutType(selectedWorkoutType === type ? null : type)}
                    className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                      selectedWorkoutType === type
                        ? 'bg-blue-500 text-white'
                        : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'
                    }`}
                  >
                    {type}
                  </button>
                ))}
              </div>
            </div>

            {selectedWorkoutType && (
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Exercise
                </label>
                <div className="flex flex-wrap gap-2">
                  {exercises.map((exercise) => (
                    <button
                      key={exercise}
                      onClick={() => setSelectedExercise(selectedExercise === exercise ? null : exercise)}
                      className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                        selectedExercise === exercise
                          ? 'bg-blue-500 text-white'
                          : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'
                      }`}
                    >
                      {exercise}
                    </button>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Stats Overview */}
      {stats && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          <div className="bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl p-6 shadow-sm">
            <div className="flex items-center gap-4">
              <div className="p-3 bg-white/10 rounded-lg backdrop-blur-sm">
                <Activity className="w-6 h-6 text-white" />
              </div>
              <div>
                <p className="text-sm text-blue-100">Workouts</p>
                <p className="text-2xl font-bold text-white">
                  {stats.totalWorkouts}
                </p>
                <p className="text-sm text-blue-100">
                  {stats.workoutsPerWeek}/week
                </p>
              </div>
            </div>
          </div>

          <div className="bg-gradient-to-br from-emerald-500 to-emerald-600 rounded-xl p-6 shadow-sm">
            <div className="flex items-center gap-4">
              <div className="p-3 bg-white/10 rounded-lg backdrop-blur-sm">
                <Dumbbell className="w-6 h-6 text-white" />
              </div>
              <div>
                <p className="text-sm text-emerald-100">Total Volume</p>
                <p className="text-2xl font-bold text-white">
                  {stats.totalVolume.toLocaleString()} lbs
                </p>
                <p className="text-sm text-emerald-100">
                  {stats.avgVolumePerWorkout.toLocaleString()}/workout
                </p>
              </div>
            </div>
          </div>

          <div className="bg-gradient-to-br from-purple-500 to-purple-600 rounded-xl p-6 shadow-sm">
            <div className="flex items-center gap-4">
              <div className="p-3 bg-white/10 rounded-lg backdrop-blur-sm">
                <TrendingUp className="w-6 h-6 text-white" />
              </div>
              <div>
                <p className="text-sm text-purple-100">Progress Rate</p>
                <p className="text-2xl font-bold text-white">
                  {Math.round((stats.totalVolume / stats.totalWorkouts) / 100) * 100}
                </p>
                <p className="text-sm text-purple-100">
                  lbs/workout
                </p>
              </div>
            </div>
          </div>

          <div className="bg-gradient-to-br from-rose-500 to-rose-600 rounded-xl p-6 shadow-sm">
            <div className="flex items-center gap-4">
              <div className="p-3 bg-white/10 rounded-lg backdrop-blur-sm">
                <Flame className="w-6 h-6 text-white" />
              </div>
              <div>
                <p className="text-sm text-rose-100">Total Sets</p>
                <p className="text-2xl font-bold text-white">
                  {stats.totalSets}
                </p>
                <p className="text-sm text-rose-100">
                  {stats.avgSetsPerWorkout} sets/workout
                </p>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Charts */}
      {selectedExercise ? (
        <div className="space-y-8">
          <div className="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700">
            <h3 className="text-lg font-semibold mb-6">
              Progress for {selectedExercise}
            </h3>
            <div className="h-80">
              <ResponsiveContainer width="100%" height="100%">
                <LineChart data={exerciseProgress}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="date" />
                  <YAxis yAxisId="left" />
                  <YAxis yAxisId="right" orientation="right" />
                  <Tooltip />
                  <Legend />
                  <Line 
                    yAxisId="left"
                    type="monotone" 
                    dataKey="volume" 
                    stroke="#3b82f6" 
                    strokeWidth={2}
                    name="Volume (lbs)"
                  />
                  <Line 
                    yAxisId="right"
                    type="monotone" 
                    dataKey="maxWeight" 
                    stroke="#ef4444" 
                    strokeWidth={2}
                    name="Max Weight (lbs)"
                  />
                </LineChart>
              </ResponsiveContainer>
            </div>
          </div>

          <div className="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700">
            <h3 className="text-lg font-semibold mb-6">
              Sets per Workout
            </h3>
            <div className="h-80">
              <ResponsiveContainer width="100%" height="100%">
                <BarChart data={exerciseProgress}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="date" />
                  <YAxis />
                  <Tooltip />
                  <Bar dataKey="sets" fill="#8b5cf6" name="Number of Sets" />
                </BarChart>
              </ResponsiveContainer>
            </div>
          </div>
        </div>
      ) : (
        <div className="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700">
          <h3 className="text-lg font-semibold mb-6">
            Overall Volume Progress
          </h3>
          <div className="h-80">
            <ResponsiveContainer width="100%" height="100%">
              <AreaChart data={processedData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="date" />
                <YAxis />
                <Tooltip />
                <Area 
                  type="monotone" 
                  dataKey="totalVolume" 
                  stroke="#3b82f6" 
                  fill="#3b82f6" 
                  fillOpacity={0.1}
                  name="Total Volume (lbs)"
                />
              </AreaChart>
            </ResponsiveContainer>
          </div>
        </div>
      )}
    </div>
  );
}

export default ProgressDashboard;

================
File: src/components/QuickPump.js
================
import React, { useState, useEffect, useRef } from 'react';
import { 
  Play, 
  Pause, 
  RotateCcw, 
  SkipForward, 
  Shuffle,
  Timer,
  Dumbbell,
  Flame,
  Volume2,
  VolumeX,
  CheckCircle,
  ArrowLeft,
  ChevronDown,
  ChevronUp,
  Music,
  Music2
} from 'lucide-react';

const exercises = [
  { 
    id: 1,
    name: 'Jumping Jacks',
    duration: 30,
    intensity: 'medium',
    targetMuscles: ['full-body', 'cardio'],
    instructions: [
      'Stand upright with feet together and arms at sides',
      'Jump while raising arms and separating legs to sides',
      'Jump again to return to starting position',
      'Keep a steady rhythm'
    ],
    caloriesPerMinute: 8
  },
  {
    id: 2,
    name: 'Push-ups',
    duration: 30,
    intensity: 'high',
    targetMuscles: ['chest', 'shoulders', 'triceps'],
    instructions: [
      'Start in plank position with hands shoulder-width apart',
      'Lower body until chest nearly touches ground',
      'Push back up to starting position',
      'Keep core tight throughout movement'
    ],
    caloriesPerMinute: 7
  },
  {
    id: 3,
    name: 'Mountain Climbers',
    duration: 30,
    intensity: 'high',
    targetMuscles: ['core', 'cardio', 'shoulders'],
    instructions: [
      'Start in plank position',
      'Drive knees alternately to chest',
      'Keep hips level and core engaged',
      'Maintain quick, controlled pace'
    ],
    caloriesPerMinute: 10
  },
  {
    id: 4,
    name: 'Squats',
    duration: 30,
    intensity: 'medium',
    targetMuscles: ['quads', 'glutes', 'core'],
    instructions: [
      'Stand with feet shoulder-width apart',
      'Lower hips back and down',
      'Keep chest up and back straight',
      'Push through heels to stand'
    ],
    caloriesPerMinute: 6
  },
  {
    id: 5,
    name: 'Plank',
    duration: 30,
    intensity: 'medium',
    targetMuscles: ['core', 'shoulders', 'back'],
    instructions: [
      'Forearms on ground, elbows under shoulders',
      'Form straight line from head to heels',
      'Engage core and glutes',
      'Keep position stable'
    ],
    caloriesPerMinute: 4
  },
  {
    id: 6,
    name: 'High Knees',
    duration: 30,
    intensity: 'high',
    targetMuscles: ['cardio', 'core', 'legs'],
    instructions: [
      'Stand in place with feet hip-width apart',
      'Run in place, driving knees high',
      'Pump arms in running motion',
      'Keep landing light and quick'
    ],
    caloriesPerMinute: 9
  },
  {
    id: 7,
    name: 'Burpees',
    duration: 30,
    intensity: 'high',
    targetMuscles: ['full-body', 'cardio'],
    instructions: [
      'Start standing, drop to squat position',
      'Kick feet back to plank',
      'Perform a push-up',
      'Jump feet forward and explosively jump up'
    ],
    caloriesPerMinute: 12
  }
];

function QuickPump() {
  const [duration, setDuration] = useState(180);
  const [timeRemaining, setTimeRemaining] = useState(duration);
  const [isRunning, setIsRunning] = useState(false);
  const [currentExerciseIndex, setCurrentExerciseIndex] = useState(0);
  const [workoutExercises, setWorkoutExercises] = useState(exercises);
  const [sound, setSound] = useState(true);
  const [showInstructions, setShowInstructions] = useState(false);
  const [completedExercises, setCompletedExercises] = useState(new Set());
  const [totalCalories, setTotalCalories] = useState(0);
  const [musicPlaying, setMusicPlaying] = useState(false);
  const [musicVolume, setMusicVolume] = useState(0.5);
  const audioRef = useRef(null);

  const workoutMusic = {
    title: "Workout Energy Mix",
    artist: "Fitness Beats",
    url: "/audio/workout-music.mp3"
  };

  useEffect(() => {
    audioRef.current = new Audio(workoutMusic.url);
    audioRef.current.volume = musicVolume;
    audioRef.current.loop = true;

    return () => {
      if (audioRef.current) {
        audioRef.current.pause();
        audioRef.current = null;
      }
    };
  }, []);

  useEffect(() => {
    if (audioRef.current) {
      audioRef.current.volume = musicVolume;
    }
  }, [musicVolume]);

  useEffect(() => {
    let interval = null;
    if (isRunning && timeRemaining > 0) {
      interval = setInterval(() => {
        setTimeRemaining(time => {
          if (time - 1 <= 0) {
            handleExerciseComplete();
          }
          return time - 1;
        });

        setTotalCalories(prev => 
          prev + (workoutExercises[currentExerciseIndex].caloriesPerMinute / 60)
        );

      }, 1000);

      if (sound && timeRemaining <= 3 && timeRemaining > 0) {
        playCountdownSound();
      }
    }
    return () => clearInterval(interval);
  }, [isRunning, timeRemaining, currentExerciseIndex, sound]);

  const playCountdownSound = () => {
    const audio = new Audio('/beep.mp3');
    audio.play().catch(e => console.log('Sound play failed:', e));
  };

  const toggleMusic = () => {
    if (audioRef.current) {
      if (musicPlaying) {
        audioRef.current.pause();
      } else {
        audioRef.current.play().catch(e => {
          console.log('Music play failed:', e);
          setMusicPlaying(false);
        });
      }
      setMusicPlaying(!musicPlaying);
    }
  };

  const handleExerciseComplete = () => {
    setCompletedExercises(prev => new Set([...prev, currentExerciseIndex]));
    if (currentExerciseIndex < workoutExercises.length - 1) {
      setCurrentExerciseIndex(prev => prev + 1);
      setTimeRemaining(duration);
    } else {
      handleWorkoutComplete();
    }
  };

  const handleWorkoutComplete = () => {
    setIsRunning(false);
    setTimeRemaining(0);
    if (audioRef.current) {
      audioRef.current.pause();
      setMusicPlaying(false);
    }
  };

  const handleStart = () => {
    setIsRunning(true);
    if (timeRemaining === 0) {
      setTimeRemaining(duration);
    }
    if (audioRef.current && !musicPlaying) {
      audioRef.current.play().catch(e => {
        console.log('Music play failed:', e);
        setMusicPlaying(false);
      });
      setMusicPlaying(true);
    }
  };

  const handlePause = () => {
    setIsRunning(false);
    if (audioRef.current && musicPlaying) {
      audioRef.current.pause();
      setMusicPlaying(false);
    }
  };

  const handleReset = () => {
    setIsRunning(false);
    setCurrentExerciseIndex(0);
    setTimeRemaining(duration);
    setCompletedExercises(new Set());
    setTotalCalories(0);
    if (audioRef.current) {
      audioRef.current.pause();
      audioRef.current.currentTime = 0;
      setMusicPlaying(false);
    }
  };

  const handleSkip = () => {
    handleExerciseComplete();
  };

  const handleShuffle = () => {
    const shuffledExercises = [...workoutExercises];
    for (let i = shuffledExercises.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffledExercises[i], shuffledExercises[j]] = [shuffledExercises[j], shuffledExercises[i]];
    }
    setWorkoutExercises(shuffledExercises);
    handleReset();
  };

  const formatTime = (time) => {
    const minutes = Math.floor(time / 60);
    const seconds = time % 60;
    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
  };

  const getIntensityColor = (intensity) => {
    switch (intensity) {
      case 'low':
        return 'text-green-500';
      case 'medium':
        return 'text-yellow-500';
      case 'high':
        return 'text-red-500';
      default:
        return 'text-gray-500';
    }
  };

  const currentExercise = workoutExercises[currentExerciseIndex];
  const progress = ((duration - timeRemaining) / duration) * 100;

  return (
    <div className="max-w-4xl mx-auto px-4 py-8">
<div className="mb-8 flex justify-between items-center">
        <div>
          <h2 className="text-2xl font-bold text-gray-900 dark:text-white">
            Quick Pump Workout
          </h2>
          <p className="mt-2 text-gray-600 dark:text-gray-400">
            High-intensity interval training you can do anywhere
          </p>
        </div>
        <button
          onClick={() => window.history.back()}
          className="px-4 py-2 text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white flex items-center gap-2"
        >
          <ArrowLeft className="w-5 h-5" />
          Back
        </button>
      </div>

      

      <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden border border-gray-200 dark:border-gray-700">
        <div className="p-6 border-b border-gray-200 dark:border-gray-700">
          <div className="flex flex-col items-center mb-6">
            <div className="relative w-48 h-48">
              <svg className="w-full h-full transform -rotate-90">
                <circle
                  cx="96"
                  cy="96"
                  r="88"
                  className="stroke-current text-gray-200 dark:text-gray-700"
                  strokeWidth="12"
                  fill="none"
                />
                <circle
                  cx="96"
                  cy="96"
                  r="88"
                  className="stroke-current text-blue-500"
                  strokeWidth="12"
                  fill="none"
                  strokeDasharray={553}
                  strokeDashoffset={553 - (553 * progress) / 100}
                />
              </svg>
              <div className="absolute inset-0 flex flex-col items-center justify-center">
                <span className="text-4xl font-bold text-gray-900 dark:text-white">
                  {formatTime(timeRemaining)}
                </span>
                <span className="text-sm text-gray-500 dark:text-gray-400">
                  remaining
                </span>
              </div>
            </div>

            <div className="text-center mt-4">
              <h3 className="text-2xl font-bold text-gray-900 dark:text-white">
                {currentExercise.name}
              </h3>
              <div className="flex items-center justify-center gap-2 mt-2">
                <span className={`text-sm font-medium ${getIntensityColor(currentExercise.intensity)}`}>
                  {currentExercise.intensity.toUpperCase()} INTENSITY
                </span>
                <span className="text-sm text-gray-500 dark:text-gray-400">
                  •
                </span>
                <span className="text-sm text-gray-500 dark:text-gray-400">
                  {Math.round(totalCalories)} cal burned
                </span>
              </div>
            </div>
          </div>

          <div className="flex justify-center space-x-4">
            <button
              onClick={handleReset}
              className="p-3 rounded-full text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700"
            >
              <RotateCcw className="w-6 h-6" />
            </button>
            <button
              onClick={isRunning ? handlePause : handleStart}
              className="p-3 rounded-full bg-blue-500 text-white hover:bg-blue-600"
            >
              {isRunning ? <Pause className="w-6 h-6" /> : <Play className="w-6 h-6" />}
            </button>
            <button
              onClick={handleSkip}
              className="p-3 rounded-full text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700"
            >
              <SkipForward className="w-6 h-6" />
            </button>
            <button
              onClick={handleShuffle}
              className="p-3 rounded-full text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700"
            >
              <Shuffle className="w-6 h-6" />
            </button>
            <button
              onClick={() => setSound(!sound)}
              className="p-3 rounded-full text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700"
            >
              {sound ? <Volume2 className="w-6 h-6" /> : <VolumeX className="w-6 h-6" />}
            </button>
          </div>

          <div className="mt-6">
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Workout Duration
            </label>
            <select
              value={duration}
              onChange={(e) => {
                setDuration(Number(e.target.value));
                setTimeRemaining(Number(e.target.value));
              }}
              className="block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              disabled={isRunning}
            >
              <option value={180}>3 minutes</option>
              <option value={300}>5 minutes</option>
              <option value={420}>7 minutes</option>
            </select>
          </div>

          <div className="mt-4 bg-gray-50 dark:bg-gray-700/50 rounded-lg p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <button
                  onClick={toggleMusic}
                  className={`p-3 rounded-full transition-colors ${
                    musicPlaying 
                      ? 'bg-blue-500 text-white hover:bg-blue-600'
                      : 'bg-gray-200 dark:bg-gray-600 text-gray-700 dark:text-gray-200 hover:bg-gray-300 dark:hover:bg-gray-500'
                  }`}
                >
                  {musicPlaying ? <Music2 className="w-6 h-6" /> : <Music className="w-6 h-6" />}
                </button>
                <div>
                  <p className="text-sm font-medium text-gray-900 dark:text-white">
                    {workoutMusic.title}
                  </p>
                  <p className="text-xs text-gray-500 dark:text-gray-400">
                    {workoutMusic.artist}
                  </p>
                </div>
              </div>
              <div className="flex items-center space-x-2">
                <Volume2 className="w-4 h-4 text-gray-400" />
                <input
                  type="range"
                  min="0"
                  max="1"
                  step="0.1"
                  value={musicVolume}
                  onChange={(e) => setMusicVolume(parseFloat(e.target.value))}
                  className="w-24"
                />
              </div>
            </div>
          </div>
        </div>

        <div className="p-6">
          <div className="flex justify-between items-center mb-4">
            <h4 className="font-medium text-gray-900 dark:text-white">
              Exercise Details
            </h4>
            <button
              onClick={() => setShowInstructions(!showInstructions)}
              className="text-blue-500 hover:text-blue-600 flex items-center"
            >
              {showInstructions ? "Hide" : "Show"} Instructions
              {showInstructions ? (
                <ChevronUp className="w-4 h-4 ml-1" />
              ) : (
                <ChevronDown className="w-4 h-4 ml-1" />
              )}
            </button>
          </div>

          {showInstructions && (
            <div className="mb-6 space-y-4">
              <div>
                <h5 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Target Muscles
                </h5>
                <div className="flex flex-wrap gap-2">
                  {currentExercise.targetMuscles.map((muscle) => (
                    <span
                      key={muscle}
                      className="px-2 py-1 text-xs font-medium text-blue-600 bg-blue-100 rounded-full"
                    >
                      {muscle}
                    </span>
                  ))}
                </div>
              </div>

              <div>
                <h5 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Instructions
                </h5>
                <ol className="list-decimal list-inside space-y-2">
                  {currentExercise.instructions.map((instruction, index) => (
                    <li key={index} className="text-gray-600 dark:text-gray-400">
                      {instruction}
                    </li>
                  ))}
                </ol>
              </div>
            </div>
          )}

          <div>
            <h4 className="font-medium text-gray-900 dark:text-white mb-4">
              Workout Sequence
            </h4>
            <div className="space-y-2">
              {workoutExercises.map((exercise, index) => (
                <div
                  key={exercise.id}
                  className={`flex items-center p-3 rounded-lg ${
                    index === currentExerciseIndex
                      ? 'bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800'
                      : 'bg-gray-50 dark:bg-gray-700/50'
                  }`}
                >
                  <div className="flex-1">
                    <div className="flex items-center">
                      <span className="text-sm font-medium text-gray-900 dark:text-white">
                        {exercise.name}
                      </span>
                      {completedExercises.has(index) && (
                        <CheckCircle className="w-4 h-4 text-green-500 ml-2" />
                      )}
                    </div>
                    <span className="text-xs text-gray-500 dark:text-gray-400">
                      {formatTime(exercise.duration)} • {exercise.intensity} intensity
                    </span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <span className={`text-sm ${getIntensityColor(exercise.intensity)}`}>
                      {exercise.caloriesPerMinute} cal/min
                    </span>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default QuickPump;

================
File: src/components/Settings.js
================
import React, { useState } from 'react';
import { 
  Moon,
  Bell,
  Shield,
  User,
  Languages,
  Share2,
  HardDrive,
  Vibrate,
  Volume2,
  Ruler
} from 'lucide-react';

function Settings({ darkMode, toggleDarkMode }) {
  const [notifications, setNotifications] = useState(true);
  const [soundEnabled, setSoundEnabled] = useState(true);
  const [vibrationEnabled, setVibrationEnabled] = useState(true);
  const [useMetric, setUseMetric] = useState(false);
  const [language, setLanguage] = useState('en');
  const [dataSaving, setDataSaving] = useState(false);

  const languages = [
    { code: 'en', name: 'English' },
    { code: 'es', name: 'Español' },
    { code: 'fr', name: 'Français' },
    { code: 'de', name: 'Deutsch' }
  ];

  const handleLanguageChange = (e) => {
    setLanguage(e.target.value);
    // Additional language change logic would go here
  };

  const settingsGroups = [
    {
      title: 'Appearance',
      settings: [
        {
          icon: Moon,
          title: 'Dark Mode',
          description: 'Toggle dark mode on/off',
          control: (
            <label className="relative inline-flex items-center cursor-pointer">
              <input
                type="checkbox"
                className="sr-only peer"
                checked={darkMode}
                onChange={toggleDarkMode}
              />
              <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
            </label>
          )
        }
      ]
    },
    {
      title: 'Notifications',
      settings: [
        {
          icon: Bell,
          title: 'Push Notifications',
          description: 'Receive workout reminders and updates',
          control: (
            <label className="relative inline-flex items-center cursor-pointer">
              <input
                type="checkbox"
                className="sr-only peer"
                checked={notifications}
                onChange={(e) => setNotifications(e.target.checked)}
              />
              <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
            </label>
          )
        },
        {
          icon: Volume2,
          title: 'Sound Effects',
          description: 'Play sounds for workout events',
          control: (
            <label className="relative inline-flex items-center cursor-pointer">
              <input
                type="checkbox"
                className="sr-only peer"
                checked={soundEnabled}
                onChange={(e) => setSoundEnabled(e.target.checked)}
              />
              <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
            </label>
          )
        },
        {
          icon: Vibrate,
          title: 'Vibration',
          description: 'Enable haptic feedback',
          control: (
            <label className="relative inline-flex items-center cursor-pointer">
              <input
                type="checkbox"
                className="sr-only peer"
                checked={vibrationEnabled}
                onChange={(e) => setVibrationEnabled(e.target.checked)}
              />
              <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
            </label>
          )
        }
      ]
    },
    {
      title: 'Preferences',
      settings: [
        {
          icon: Ruler,
          title: 'Unit System',
          description: 'Choose between metric and imperial units',
          control: (
            <label className="relative inline-flex items-center cursor-pointer">
              <input
                type="checkbox"
                className="sr-only peer"
                checked={useMetric}
                onChange={(e) => setUseMetric(e.target.checked)}
              />
              <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
              <span className="ml-2 text-sm text-gray-500 dark:text-gray-400">
                {useMetric ? 'Metric (kg)' : 'Imperial (lbs)'}
              </span>
            </label>
          )
        },
        {
          icon: Languages,
          title: 'Language',
          description: 'Select your preferred language',
          control: (
            <select
              value={language}
              onChange={handleLanguageChange}
              className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
            >
              {languages.map(lang => (
                <option key={lang.code} value={lang.code}>
                  {lang.name}
                </option>
              ))}
            </select>
          )
        },
        {
          icon: HardDrive,
          title: 'Data Saving Mode',
          description: 'Reduce data usage and improve performance',
          control: (
            <label className="relative inline-flex items-center cursor-pointer">
              <input
                type="checkbox"
                className="sr-only peer"
                checked={dataSaving}
                onChange={(e) => setDataSaving(e.target.checked)}
              />
              <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
            </label>
          )
        }
      ]
    }
  ];

  return (
    <div className="max-w-4xl mx-auto px-4 py-8">
      <div className="mb-6">
        <h2 className="text-2xl font-bold text-gray-900 dark:text-white">
          Settings
        </h2>
        <p className="mt-2 text-gray-600 dark:text-gray-400">
          Customize your workout experience
        </p>
      </div>

      <div className="space-y-6">
        {settingsGroups.map((group, index) => (
          <div
            key={index}
            className="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700"
          >
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
              {group.title}
            </h3>
            <div className="space-y-4">
              {group.settings.map((setting, settingIndex) => (
                <div
                  key={settingIndex}
                  className="flex items-center justify-between py-3"
                >
                  <div className="flex items-start">
                    <div className="flex-shrink-0">
                      <setting.icon className="w-6 h-6 text-gray-400" />
                    </div>
                    <div className="ml-3">
                      <p className="text-sm font-medium text-gray-900 dark:text-white">
                        {setting.title}
                      </p>
                      <p className="text-sm text-gray-500 dark:text-gray-400">
                        {setting.description}
                      </p>
                    </div>
                  </div>
                  <div className="ml-4">
                    {setting.control}
                  </div>
                </div>
              ))}
            </div>
          </div>
        ))}

        <div className="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700">
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
            About
          </h3>
          <div className="space-y-2">
            <p className="text-sm text-gray-600 dark:text-gray-400">
              Version: 1.0.0
            </p>
            <div className="flex space-x-4">
              <button className="text-blue-600 dark:text-blue-400 text-sm hover:underline">
                Privacy Policy
              </button>
              <button className="text-blue-600 dark:text-blue-400 text-sm hover:underline">
                Terms of Service
              </button>
              <button className="text-blue-600 dark:text-blue-400 text-sm hover:underline">
                Contact Support
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default Settings;

================
File: src/components/WorkoutDetail.js
================
import React, { useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import Exercise from './Exercise';
import { saveWorkout } from '../utils/db';
import { ArrowLeft, Play, Clock, Dumbbell, Calendar } from 'lucide-react';

function WorkoutDetail({ workoutPrograms, onFinish }) {
  const { id } = useParams();
  const navigate = useNavigate();
  const workout = workoutPrograms[id];
  
  const [exerciseData, setExerciseData] = useState(
    workout ? workout.exercises.reduce((data, exercise) => {
      data[exercise.name] = {
        sets: new Array(4).fill({ weight: '', reps: '', rest: '', completed: false })
      };
      return data;
    }, {}) : {}
  );

  if (!workout) {
    return (
      <div className="max-w-4xl mx-auto px-4 py-8">
        <div className="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm">
          <h2 className="text-2xl font-semibold mb-4">Workout not found</h2>
          <button
            onClick={() => navigate('/select-location')}
            className="text-blue-500 dark:text-blue-400 hover:underline inline-flex items-center"
          >
            <ArrowLeft className="w-4 h-4 mr-1" />
            Back to workout selection
          </button>
        </div>
      </div>
    );
  }

  const handleChange = (exerciseName, field, value) => {
    setExerciseData({
      ...exerciseData,
      [exerciseName]: {
        ...exerciseData[exerciseName],
        [field]: value
      }
    });
  };

  const handleAddSet = (exerciseName) => {
    const newSets = [...exerciseData[exerciseName].sets, { weight: '', reps: '', rest: '', completed: false }];
    handleChange(exerciseName, 'sets', newSets);
  };

  const handleRemoveSet = (exerciseName) => {
    const newSets = exerciseData[exerciseName].sets.slice(0, -1);
    handleChange(exerciseName, 'sets', newSets);
  };

  const handleFinishWorkout = () => {
    const finishedWorkout = {
      id: workout.id,
      name: workout.name,
      date: new Date().toISOString(),
      exercises: workout.exercises.map(exercise => ({
        name: exercise.name,
        sets: exerciseData[exercise.name].sets
      }))
    };

    saveWorkout(finishedWorkout).then(() => {
      onFinish(finishedWorkout);
      navigate('/history');
    });
  };

  const isWorkoutComplete = () => {
    return Object.values(exerciseData).every(exercise => 
      exercise.sets.some(set => set.completed)
    );
  };

  return (
    <div className="max-w-4xl mx-auto px-4 py-8">
      {/* Workout Header */}
      <div className="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700 mb-6">
        <div className="flex justify-between items-start">
          <div>
            <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">
              {workout.name}
            </h2>
            <div className="flex space-x-4 text-gray-600 dark:text-gray-400">
              <div className="flex items-center">
                <Clock className="w-4 h-4 mr-1" />
                <span className="text-sm">45-60 min</span>
              </div>
              <div className="flex items-center">
                <Dumbbell className="w-4 h-4 mr-1" />
                <span className="text-sm">{workout.exercises.length} exercises</span>
              </div>
              <div className="flex items-center">
                <Calendar className="w-4 h-4 mr-1" />
                <span className="text-sm">{new Date().toLocaleDateString()}</span>
              </div>
            </div>
          </div>
          <button
            onClick={() => navigate(-1)}
            className="text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white"
          >
            <ArrowLeft className="w-5 h-5" />
          </button>
        </div>
      </div>

      {/* Exercises */}
      <div className="space-y-6">
        {workout.exercises.map((exercise) => (
          <Exercise
            key={exercise.name}
            exercise={exercise}
            data={exerciseData[exercise.name]}
            onChange={handleChange}
            onAddSet={handleAddSet}
            onRemoveSet={handleRemoveSet}
          />
        ))}
      </div>

      {/* Complete Workout Button */}
      <div className="mt-8 flex justify-end">
        <button
          onClick={handleFinishWorkout}
          disabled={!isWorkoutComplete()}
          className={`inline-flex items-center px-6 py-3 rounded-lg text-white font-semibold
            ${isWorkoutComplete()
              ? 'bg-emerald-500 hover:bg-emerald-600'
              : 'bg-gray-300 cursor-not-allowed'
            } transition-colors`}
        >
          <Play className="w-5 h-5 mr-2" />
          Complete Workout
        </button>
      </div>
    </div>
  );
}

export default WorkoutDetail;

================
File: src/components/WorkoutHistory.js
================
import React, { useState } from 'react';
import { 
  Calendar,
  Clock,
  Dumbbell,
  Filter,
  ChevronDown,
  ArrowUpDown,
  Flame
} from 'lucide-react';

function WorkoutHistory({ workouts }) {
  const [sortOrder, setSortOrder] = useState('desc');
  const [filterType, setFilterType] = useState('all');
  const [showFilters, setShowFilters] = useState(false);

  // Calculate total workout stats
  const stats = workouts.reduce((acc, workout) => {
    // Total workouts
    acc.totalWorkouts += 1;

    // Total weight lifted
    const workoutWeight = workout.exercises.reduce((sum, exercise) => {
      if (exercise.sets) {
        return sum + exercise.sets.reduce((setSum, set) => {
          return setSum + (Number(set.weight) * Number(set.reps) || 0);
        }, 0);
      }
      return sum;
    }, 0);
    acc.totalWeight += workoutWeight;

    // Total duration (assuming we have duration data)
    const workoutDuration = workout.exercises.reduce((sum, exercise) => {
      return sum + (exercise.sets ? exercise.sets.length * (Number(exercise.sets[0]?.rest) || 60) : 0);
    }, 0);
    acc.totalDuration += workoutDuration;

    return acc;
  }, { totalWorkouts: 0, totalWeight: 0, totalDuration: 0 });

  // Sort workouts
  const sortedWorkouts = [...workouts].sort((a, b) => {
    const dateA = new Date(a.date);
    const dateB = new Date(b.date);
    return sortOrder === 'desc' ? dateB - dateA : dateA - dateB;
  });

  // Filter workouts
  const filteredWorkouts = sortedWorkouts.filter(workout => {
    if (filterType === 'all') return true;
    return workout.name.toLowerCase().includes(filterType.toLowerCase());
  });

  // Get unique workout types for filter
  const workoutTypes = ['all', ...new Set(workouts.map(w => w.name))];

  const formatDuration = (seconds) => {
    const minutes = Math.floor(seconds / 60);
    return `${minutes} min`;
  };

  const calculateTotalVolume = (exercises) => {
    return exercises.reduce((sum, exercise) => {
      if (exercise.sets) {
        return sum + exercise.sets.reduce((setSum, set) => {
          return setSum + (Number(set.weight) * Number(set.reps) || 0);
        }, 0);
      }
      return sum;
    }, 0);
  };

  return (
    <div className="max-w-4xl mx-auto px-4 py-8">
      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <div className="bg-white dark:bg-gray-800 rounded-xl p-4 shadow-sm border border-gray-200 dark:border-gray-700">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-500 dark:text-gray-400">Total Workouts</p>
              <p className="text-2xl font-bold text-gray-900 dark:text-white">{stats.totalWorkouts}</p>
            </div>
            <Dumbbell className="w-8 h-8 text-blue-500" />
          </div>
        </div>
        <div className="bg-white dark:bg-gray-800 rounded-xl p-4 shadow-sm border border-gray-200 dark:border-gray-700">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-500 dark:text-gray-400">Total Weight Lifted</p>
              <p className="text-2xl font-bold text-gray-900 dark:text-white">
                {Math.round(stats.totalWeight).toLocaleString()} lbs
              </p>
            </div>
            <Flame className="w-8 h-8 text-orange-500" />
          </div>
        </div>
        <div className="bg-white dark:bg-gray-800 rounded-xl p-4 shadow-sm border border-gray-200 dark:border-gray-700">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-500 dark:text-gray-400">Total Duration</p>
              <p className="text-2xl font-bold text-gray-900 dark:text-white">
                {formatDuration(stats.totalDuration)}
              </p>
            </div>
            <Clock className="w-8 h-8 text-green-500" />
          </div>
        </div>
      </div>

      {/* Filters and Controls */}
      <div className="bg-white dark:bg-gray-800 rounded-xl p-4 shadow-sm border border-gray-200 dark:border-gray-700 mb-6">
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
          <div className="flex items-center gap-4">
            <button
              onClick={() => setShowFilters(!showFilters)}
              className="flex items-center gap-2 px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-200 bg-gray-100 dark:bg-gray-700 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600"
            >
              <Filter className="w-4 h-4" />
              Filters
              <ChevronDown className={`w-4 h-4 transform transition-transform ${showFilters ? 'rotate-180' : ''}`} />
            </button>
            <button
              onClick={() => setSortOrder(sortOrder === 'desc' ? 'asc' : 'desc')}
              className="flex items-center gap-2 px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-200 bg-gray-100 dark:bg-gray-700 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600"
            >
              <ArrowUpDown className="w-4 h-4" />
              {sortOrder === 'desc' ? 'Newest First' : 'Oldest First'}
            </button>
          </div>
          <div className="text-sm text-gray-500 dark:text-gray-400">
            Showing {filteredWorkouts.length} of {workouts.length} workouts
          </div>
        </div>

        {/* Filter Options */}
        {showFilters && (
          <div className="mt-4 flex flex-wrap gap-2">
            {workoutTypes.map((type) => (
              <button
                key={type}
                onClick={() => setFilterType(type)}
                className={`px-3 py-1 text-sm rounded-full ${
                  filterType === type
                    ? 'bg-blue-500 text-white'
                    : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-200'
                }`}
              >
                {type.charAt(0).toUpperCase() + type.slice(1)}
              </button>
            ))}
          </div>
        )}
      </div>

      {/* Workout List */}
      {filteredWorkouts.length === 0 ? (
        <div className="text-center py-8">
          <p className="text-gray-500 dark:text-gray-400">No workouts found.</p>
        </div>
      ) : (
        <div className="space-y-4">
          {filteredWorkouts.map((workout, index) => (
            <div 
              key={index}
              className="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700"
            >
              <div className="flex flex-col md:flex-row justify-between mb-4">
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">
                    {workout.name}
                  </h3>
                  <div className="flex items-center gap-4 text-sm text-gray-500 dark:text-gray-400">
                    <div className="flex items-center gap-1">
                      <Calendar className="w-4 h-4" />
                      {new Date(workout.date).toLocaleDateString()}
                    </div>
                    <div className="flex items-center gap-1">
                      <Dumbbell className="w-4 h-4" />
                      {Math.round(calculateTotalVolume(workout.exercises)).toLocaleString()} lbs
                    </div>
                  </div>
                </div>
              </div>

              <div className="border-t border-gray-200 dark:border-gray-700 pt-4">
                <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Exercises
                </h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {workout.exercises.map((exercise, i) => (
                    <div key={i} className="bg-gray-50 dark:bg-gray-700 rounded-lg p-3">
                      <p className="font-medium text-gray-900 dark:text-white mb-1">
                        {exercise.name}
                      </p>
                      <div className="text-sm text-gray-500 dark:text-gray-400">
                        {exercise.sets?.map((set, j) => (
                          <span key={j} className="inline-block mr-3">
                            Set {j + 1}: {set.weight}lbs × {set.reps}
                          </span>
                        ))}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}

export default WorkoutHistory;

================
File: src/components/WorkoutLocationSelection.js
================
import React from 'react';
import { Link } from 'react-router-dom';
import { Building2, Home, Globe } from 'lucide-react';

function WorkoutLocationSelection() {
  const locations = [
    { 
      id: 'gym', 
      name: 'At the Gym',
      description: 'Access to full equipment for strength and cardio training',
      icon: Building2,
      color: 'bg-sky-50 hover:bg-sky-100 border-sky-200',
      iconColor: 'text-sky-600'
    },
    { 
      id: 'home', 
      name: 'At Home',
      description: 'Workouts optimized for minimal or no equipment',
      icon: Home,
      color: 'bg-emerald-50 hover:bg-emerald-100 border-emerald-200',
      iconColor: 'text-emerald-600'
    },
    { 
      id: 'anywhere', 
      name: 'On the Go',
      description: 'Quick workouts you can do anywhere, anytime',
      icon: Globe,
      color: 'bg-purple-50 hover:bg-purple-100 border-purple-200',
      iconColor: 'text-purple-600',
      route: '/quick-pump' // Special route for "anywhere" option
    }
  ];

  return (
    <div className="max-w-4xl mx-auto px-4 py-8">
      <div className="mb-8">
        <h2 className="text-2xl font-bold text-gray-900 dark:text-white">
          Choose Your Workout Location
        </h2>
        <p className="mt-2 text-gray-600 dark:text-gray-400">
          Select where you'll be working out to get a customized program
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {locations.map(location => {
          const Icon = location.icon;
          return (
            <Link
              key={location.id}
              to={location.route || `/workouts/${location.id}`}
              className={`relative group rounded-xl p-6 border-2 transition-all duration-300 ${location.color}
                transform hover:scale-102 hover:shadow-lg`}
            >
              <div className="flex flex-col h-full">
                <div className={`w-12 h-12 rounded-lg ${location.color} flex items-center justify-center mb-4`}>
                  <Icon className={`w-6 h-6 ${location.iconColor}`} />
                </div>
                
                <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">
                  {location.name}
                </h3>
                
                <p className="text-gray-600 dark:text-gray-400 mb-4 flex-grow">
                  {location.description}
                </p>

                <div className={`flex items-center text-sm font-medium ${location.iconColor}`}>
                  Select location
                  <svg 
                    className="w-4 h-4 ml-1 transform transition-transform group-hover:translate-x-1" 
                    fill="none" 
                    viewBox="0 0 24 24" 
                    stroke="currentColor"
                  >
                    <path 
                      strokeLinecap="round" 
                      strokeLinejoin="round" 
                      strokeWidth={2} 
                      d="M9 5l7 7-7 7" 
                    />
                  </svg>
                </div>
              </div>

              <div className="absolute inset-0 border-2 border-transparent rounded-xl transition-colors duration-300 group-hover:border-current group-hover:border-opacity-10" />
            </Link>
          );
        })}
      </div>

      {/* Back button */}
      <Link
        to="/"
        className="inline-flex items-center mt-8 text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white"
      >
        <svg 
          className="w-4 h-4 mr-1" 
          fill="none" 
          viewBox="0 0 24 24" 
          stroke="currentColor"
        >
          <path 
            strokeLinecap="round" 
            strokeLinejoin="round" 
            strokeWidth={2} 
            d="M15 19l-7-7 7-7" 
          />
        </svg>
        Back to home
      </Link>
    </div>
  );
}

export default WorkoutLocationSelection;

================
File: src/components/WorkoutSelection.js
================
import React from 'react';
import { Link, useParams, Navigate } from 'react-router-dom';
import { 
  Dumbbell, 
  Timer, 
  Zap,
  ArrowLeft,
  ChevronRight,
  Clock,
  Flame,
  Activity
} from 'lucide-react';

function WorkoutSelection() {
  const { location } = useParams();
  
  const workoutDetails = {
    arms: {
      id: 'arms',
      name: 'Arms & Upper Body',
      icon: Dumbbell,
      color: 'bg-rose-50 hover:bg-rose-100 border-rose-200',
      iconColor: 'text-rose-600',
      duration: '45-60 min',
      difficulty: 'Intermediate',
      calories: '300-400',
      description: 'Complete upper body workout focusing on arms and auxiliary muscle groups'
    },
    abs: {
      id: 'abs',
      name: 'Core & Abs',
      icon: Activity,
      color: 'bg-amber-50 hover:bg-amber-100 border-amber-200',
      iconColor: 'text-amber-600',
      duration: '30-40 min',
      difficulty: 'Intermediate',
      calories: '200-300',
      description: 'Core-focused workout to build strength and definition'
    },
    legs: {
      id: 'legs',
      name: 'Legs & Lower Body',
      icon: Timer,
      color: 'bg-blue-50 hover:bg-blue-100 border-blue-200',
      iconColor: 'text-blue-600',
      duration: '50-60 min',
      difficulty: 'Advanced',
      calories: '400-500',
      description: 'Lower body strength training for building muscle and power'
    },
    hiit: {
      id: 'hiit',
      name: 'HIIT Workout',
      icon: Zap,
      color: 'bg-purple-50 hover:bg-purple-100 border-purple-200',
      iconColor: 'text-purple-600',
      duration: '20-30 min',
      difficulty: 'Advanced',
      calories: '250-350',
      description: 'High-intensity intervals to boost metabolism and improve cardiovascular fitness'
    },
    cardio: {
      id: 'cardio',
      name: 'Cardio Blast',
      icon: Flame,
      color: 'bg-emerald-50 hover:bg-emerald-100 border-emerald-200',
      iconColor: 'text-emerald-600',
      duration: '30-45 min',
      difficulty: 'Beginner',
      calories: '200-300',
      description: 'Endurance-focused workout to improve stamina and heart health'
    }
  };

  const workoutsByLocation = {
    gym: ['arms', 'abs', 'legs'],
    home: ['hiit', 'cardio'],
    anywhere: ['hiit', 'cardio']
  };

  // If location is not valid, redirect to location selection
  if (!location || !workoutsByLocation[location]) {
    return <Navigate to="/select-location" replace />;
  }

  const availableWorkouts = workoutsByLocation[location];
  const locationDisplayName = location.charAt(0).toUpperCase() + location.slice(1);

  return (
    <div className="max-w-4xl mx-auto px-4 py-8">
      <div className="mb-8">
        <h2 className="text-2xl font-bold text-gray-900 dark:text-white">
          {locationDisplayName} Workouts
        </h2>
        <p className="mt-2 text-gray-600 dark:text-gray-400">
          Choose a workout program tailored for {locationDisplayName.toLowerCase()}
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {availableWorkouts.map(workoutId => {
          const details = workoutDetails[workoutId];
          const Icon = details.icon;
          
          return (
            <Link 
              key={workoutId}
              to={`/workout/${workoutId}`}
              className={`relative group rounded-xl p-6 border-2 transition-all duration-300 ${details.color}
                transform hover:scale-102 hover:shadow-lg`}
            >
              <div className="flex flex-col h-full">
                <div className={`w-12 h-12 rounded-lg ${details.color} flex items-center justify-center mb-4`}>
                  <Icon className={`w-6 h-6 ${details.iconColor}`} />
                </div>
                
                <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">
                  {details.name}
                </h3>
                
                <p className="text-gray-600 dark:text-gray-400 mb-4 flex-grow">
                  {details.description}
                </p>

                <div className="grid grid-cols-3 gap-2 mb-4">
                  <div className="flex items-center space-x-1">
                    <Clock className="w-4 h-4 text-gray-400" />
                    <span className="text-sm text-gray-600">{details.duration}</span>
                  </div>
                  <div className="flex items-center space-x-1">
                    <Activity className="w-4 h-4 text-gray-400" />
                    <span className="text-sm text-gray-600">{details.difficulty}</span>
                  </div>
                  <div className="flex items-center space-x-1">
                    <Flame className="w-4 h-4 text-gray-400" />
                    <span className="text-sm text-gray-600">{details.calories}</span>
                  </div>
                </div>

                <div className={`flex items-center text-sm font-medium ${details.iconColor}`}>
                  Start workout
                  <ChevronRight className="w-4 h-4 ml-1 transform transition-transform group-hover:translate-x-1" />
                </div>
              </div>

              <div className="absolute inset-0 border-2 border-transparent rounded-xl transition-colors duration-300 group-hover:border-current group-hover:border-opacity-10" />
            </Link>
          );
        })}
      </div>

      <Link
        to="/select-location"
        className="inline-flex items-center mt-8 text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white"
      >
        <ArrowLeft className="w-4 h-4 mr-1" />
        Choose different location
      </Link>
    </div>
  );
}

export default WorkoutSelection;

================
File: src/index.css
================
@import 'tailwindcss/base';
@import 'tailwindcss/components';
@import 'tailwindcss/utilities';

:root {
  --primary-color: theme('colors.blue.500');
  --secondary-color: theme('colors.gray.400');
  --background-color: theme('colors.gray.50');
  --text-color: theme('colors.gray.900');
}

.dark {
  --primary-color: theme('colors.blue.400');
  --secondary-color: theme('colors.gray.600');
  --background-color: theme('colors.gray.900');
  --text-color: theme('colors.gray.100');
}

.switch {
  position: relative;
  display: inline-block;
  width: 60px;
  height: 34px;
}

.switch input {
  opacity: 0;
  width: 0;
  height: 0;
}

.slider {
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: theme('colors.gray.300');
  transition: .4s;
  border-radius: 34px;
}

.slider:before {
  position: absolute;
  content: "";
  height: 26px;
  width: 26px;
  left: 4px;
  bottom: 4px;
  background-color: white;
  transition: .4s;
  border-radius: 50%;
}

input:checked + .slider {
  background-color: theme('colors.blue.500');
}

input:focus + .slider {
  box-shadow: 0 0 1px theme('colors.blue.500');
}

input:checked + .slider:before {
  transform: translateX(26px);
}

================
File: src/index.js
================
import React from 'react';
import { createRoot } from 'react-dom/client';
import './index.css';
import App from './App';
import * as serviceWorker from './ServiceWorker';

const container = document.getElementById('root');
const root = createRoot(container);

root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

serviceWorker.register();

================
File: src/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

================
File: src/reportWebVitals.js
================
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

================
File: src/ServiceWorker.js
================
/* eslint-disable no-restricted-globals */
import { getWorkouts, clearWorkouts } from './utils/db';

export function register() {
  if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
      navigator.serviceWorker.register('/service-worker.js')
        .then((registration) => {
          console.log('Service Worker registered: ', registration);
        })
        .catch((error) => {
          console.log('Service Worker registration failed: ', error);
        });
    });
  }
}

export function unregister() {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.ready
      .then((registration) => {
        registration.unregister();
      })
      .catch((error) => {
        console.error(error.message);
      });
  }
}

self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open('workout-tracker-cache').then((cache) => {
      return cache.addAll([
        '/',
        '/index.html',
        '/manifest.json',
        '/static/js/bundle.js',
        '/static/css/main.css',
      ]);
    })
  );
});

self.addEventListener('fetch', (event) => {
  event.respondWith(
    caches.match(event.request).then((response) => {
      return response || fetch(event.request);
    })
  );
});

self.addEventListener('sync', (event) => {
  if (event.tag === 'sync-workouts') {
    event.waitUntil(syncWorkouts());
  }
});

function syncWorkouts() {
  return getWorkouts().then((workouts) => {
    return fetch('/api/workouts', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(workouts),
    }).then(() => {
      return clearWorkouts();
    });
  });
}

================
File: src/setupTests.js
================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

================
File: src/utils/db.js
================
export function openDatabase() {
    return new Promise((resolve, reject) => {
      const request = indexedDB.open('workout-tracker', 1);
  
      request.onerror = () => {
        reject(new Error('Failed to open database'));
      };
  
      request.onsuccess = () => {
        resolve(request.result);
      };
  
      request.onupgradeneeded = (event) => {
        const db = event.target.result;
        db.createObjectStore('workouts', { keyPath: 'id', autoIncrement: true });
      };
    });
  }
  
  export function saveWorkout(workout) {
    return openDatabase().then((db) => {
      const transaction = db.transaction(['workouts'], 'readwrite');
      const store = transaction.objectStore('workouts');
      store.add(workout);
      return transaction.complete;
    });
  }
  
  export function getWorkouts() {
    return openDatabase().then((db) => {
      const transaction = db.transaction(['workouts'], 'readonly');
      const store = transaction.objectStore('workouts');
      return store.getAll();
    });
  }
  
  export function clearWorkouts() {
    return openDatabase().then((db) => {
      const transaction = db.transaction(['workouts'], 'readwrite');
      const store = transaction.objectStore('workouts');
      store.clear();
      return transaction.complete;
    });
  }

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
    content: [
      "./src/**/*.{js,jsx,ts,tsx}",
    ],
    darkMode: 'class',
    theme: {
      extend: {
        colors: {
          primary: {
            50: '#f0f9ff',
            100: '#e0f2fe',
            200: '#bae6fd',
            300: '#7dd3fc',
            400: '#38bdf8',
            500: '#0ea5e9',
            600: '#0284c7',
            700: '#0369a1',
            800: '#075985',
            900: '#0c4a6e',
          }
        },
        fontFamily: {
          sans: ['Inter', 'system-ui', 'sans-serif'],
        },
        backgroundImage: {
          'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',
          'gradient-conic': 'conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))',
        }
      },
    },
    plugins: [],
  }
